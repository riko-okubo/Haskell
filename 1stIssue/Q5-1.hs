-- 与えられた整数列における最大部分列和を求める関数mssを作成してください。
-- 例えば、mss [3,-4,2,-1,6,-3] = 7 です。
-- なお、空の部分列の和は0とします。

mss :: (Ord a, Num a) => [a] -> a
mss = mss2 0 0
  where
    mss2 :: (Ord a, Num a) => a -> a -> [a] -> a
    mss2 s mss [] = mss
    mss2 s mss (x:xs) = mss2 (max 0 (s + x)) (max mss (s + x)) xs

-- このアルゴリズムは、次のようなものです。
-- 1. 部分列の和を計算する変数sと、最大部分列和を計算する変数mssを用意する。
-- 2. 整数列を先頭から順に見ていく。
-- 3. 整数xを見たとき、s + xが0より大きければ、s + xをsに代入する。
-- 4. s + xがmssより大きければ、s + xをmssに代入する。
-- 5. 整数列の最後まで見たら、mssを返す。
-- このアルゴリズムは、整数列を先頭から順に見ていくだけなので、
-- 計算量はO(n)です。