-- 空リストかhead部にa型がありtail部に[a]型のリストがあるようなconsセルのいずれか
-- になるような再起的な型構造の[a]型のリストを元に考える。
-- 以下の関数を、リストの再帰構造に基づく自然な再帰関数として定義する。

-- 0以上の整数nを受け取り、リスト[n, n-1, ... ,0]を返す関数を定義する。
downto0 :: Int -> [Int]
downto0 0 = [0]
downto0 n = n : downto0 (n - 1)

-- 二つの要素がa型のリストのペアを引数にとり、対応する同士の和からなるリストを返す関数を定義する。
-- 要素はIntとは限らないので、型変数aを使う。
-- ただし、二つのリストの長さが異なる場合は、短い方のリストの長さに合わせる。
zipPlus :: (Num a) => ([a],[a]) -> [a]
zipPlus ([], _) = []
zipPlus (_, []) = []
zipPlus (x:xs, y:ys) = x + y : zipPlus (xs, ys)